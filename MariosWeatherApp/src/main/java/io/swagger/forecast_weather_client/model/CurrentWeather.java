/*
 * Open-Meteo APIs
 * Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.
 *
 * OpenAPI spec version: 1.0
 * Contact: info@open-meteo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.forecast_weather_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CurrentWeather
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-06-25T15:17:37.234703587Z[GMT]")

public class CurrentWeather {
  @SerializedName("time")
  private String time = null;

  @SerializedName("temperature")
  private Float temperature = null;

  @SerializedName("wind_speed")
  private Float windSpeed = null;

  @SerializedName("wind_direction")
  private Float windDirection = null;

  @SerializedName("weather_code")
  private Integer weatherCode = null;

  public CurrentWeather time(String time) {
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @Schema(required = true, description = "")
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public CurrentWeather temperature(Float temperature) {
    this.temperature = temperature;
    return this;
  }

   /**
   * Get temperature
   * @return temperature
  **/
  @Schema(required = true, description = "")
  public Float getTemperature() {
    return temperature;
  }

  public void setTemperature(Float temperature) {
    this.temperature = temperature;
  }

  public CurrentWeather windSpeed(Float windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

   /**
   * Get windSpeed
   * @return windSpeed
  **/
  @Schema(required = true, description = "")
  public Float getWindSpeed() {
    return windSpeed;
  }

  public void setWindSpeed(Float windSpeed) {
    this.windSpeed = windSpeed;
  }

  public CurrentWeather windDirection(Float windDirection) {
    this.windDirection = windDirection;
    return this;
  }

   /**
   * Get windDirection
   * @return windDirection
  **/
  @Schema(required = true, description = "")
  public Float getWindDirection() {
    return windDirection;
  }

  public void setWindDirection(Float windDirection) {
    this.windDirection = windDirection;
  }

  public CurrentWeather weatherCode(Integer weatherCode) {
    this.weatherCode = weatherCode;
    return this;
  }

   /**
   * Get weatherCode
   * @return weatherCode
  **/
  @Schema(required = true, description = "")
  public Integer getWeatherCode() {
    return weatherCode;
  }

  public void setWeatherCode(Integer weatherCode) {
    this.weatherCode = weatherCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentWeather currentWeather = (CurrentWeather) o;
    return Objects.equals(this.time, currentWeather.time) &&
        Objects.equals(this.temperature, currentWeather.temperature) &&
        Objects.equals(this.windSpeed, currentWeather.windSpeed) &&
        Objects.equals(this.windDirection, currentWeather.windDirection) &&
        Objects.equals(this.weatherCode, currentWeather.weatherCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, temperature, windSpeed, windDirection, weatherCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentWeather {\n");
    
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    windSpeed: ").append(toIndentedString(windSpeed)).append("\n");
    sb.append("    windDirection: ").append(toIndentedString(windDirection)).append("\n");
    sb.append("    weatherCode: ").append(toIndentedString(weatherCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
