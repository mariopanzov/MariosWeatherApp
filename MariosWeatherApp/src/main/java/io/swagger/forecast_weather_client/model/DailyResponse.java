/*
 * Open-Meteo APIs
 * Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.
 *
 * OpenAPI spec version: 1.0
 * Contact: info@open-meteo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.forecast_weather_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DailyResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-06-25T15:17:37.234703587Z[GMT]")

public class DailyResponse {
  @SerializedName("time")
  private List<String> time = new ArrayList<String>();

  @SerializedName("temperature_2m_max")
  private List<Float> temperature2mMax = null;

  @SerializedName("temperature_2m_min")
  private List<Float> temperature2mMin = null;

  @SerializedName("apparent_temperature_max")
  private List<Float> apparentTemperatureMax = null;

  @SerializedName("apparent_temperature_min")
  private List<Float> apparentTemperatureMin = null;

  @SerializedName("precipitation_sum")
  private List<Float> precipitationSum = null;

  @SerializedName("precipitation_hours")
  private List<Float> precipitationHours = null;

  @SerializedName("weather_code")
  private List<Float> weatherCode = null;

  @SerializedName("sunrise")
  private List<Float> sunrise = null;

  @SerializedName("sunset")
  private List<Float> sunset = null;

  @SerializedName("wind_speed_10m_max")
  private List<Float> windSpeed10mMax = null;

  @SerializedName("wind_gusts_10m_max")
  private List<Float> windGusts10mMax = null;

  @SerializedName("wind_direction_10m_dominant")
  private List<Float> windDirection10mDominant = null;

  @SerializedName("shortwave_radiation_sum")
  private List<Float> shortwaveRadiationSum = null;

  @SerializedName("uv_index_max")
  private List<Float> uvIndexMax = null;

  @SerializedName("uv_index_clear_sky_max")
  private List<Float> uvIndexClearSkyMax = null;

  @SerializedName("et0_fao_evapotranspiration")
  private List<Float> et0FaoEvapotranspiration = null;

  public DailyResponse time(List<String> time) {
    this.time = time;
    return this;
  }

  public DailyResponse addTimeItem(String timeItem) {
    this.time.add(timeItem);
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @Schema(required = true, description = "")
  public List<String> getTime() {
    return time;
  }

  public void setTime(List<String> time) {
    this.time = time;
  }

  public DailyResponse temperature2mMax(List<Float> temperature2mMax) {
    this.temperature2mMax = temperature2mMax;
    return this;
  }

  public DailyResponse addTemperature2mMaxItem(Float temperature2mMaxItem) {
    if (this.temperature2mMax == null) {
      this.temperature2mMax = new ArrayList<Float>();
    }
    this.temperature2mMax.add(temperature2mMaxItem);
    return this;
  }

   /**
   * Get temperature2mMax
   * @return temperature2mMax
  **/
  @Schema(description = "")
  public List<Float> getTemperature2mMax() {
    return temperature2mMax;
  }

  public void setTemperature2mMax(List<Float> temperature2mMax) {
    this.temperature2mMax = temperature2mMax;
  }

  public DailyResponse temperature2mMin(List<Float> temperature2mMin) {
    this.temperature2mMin = temperature2mMin;
    return this;
  }

  public DailyResponse addTemperature2mMinItem(Float temperature2mMinItem) {
    if (this.temperature2mMin == null) {
      this.temperature2mMin = new ArrayList<Float>();
    }
    this.temperature2mMin.add(temperature2mMinItem);
    return this;
  }

   /**
   * Get temperature2mMin
   * @return temperature2mMin
  **/
  @Schema(description = "")
  public List<Float> getTemperature2mMin() {
    return temperature2mMin;
  }

  public void setTemperature2mMin(List<Float> temperature2mMin) {
    this.temperature2mMin = temperature2mMin;
  }

  public DailyResponse apparentTemperatureMax(List<Float> apparentTemperatureMax) {
    this.apparentTemperatureMax = apparentTemperatureMax;
    return this;
  }

  public DailyResponse addApparentTemperatureMaxItem(Float apparentTemperatureMaxItem) {
    if (this.apparentTemperatureMax == null) {
      this.apparentTemperatureMax = new ArrayList<Float>();
    }
    this.apparentTemperatureMax.add(apparentTemperatureMaxItem);
    return this;
  }

   /**
   * Get apparentTemperatureMax
   * @return apparentTemperatureMax
  **/
  @Schema(description = "")
  public List<Float> getApparentTemperatureMax() {
    return apparentTemperatureMax;
  }

  public void setApparentTemperatureMax(List<Float> apparentTemperatureMax) {
    this.apparentTemperatureMax = apparentTemperatureMax;
  }

  public DailyResponse apparentTemperatureMin(List<Float> apparentTemperatureMin) {
    this.apparentTemperatureMin = apparentTemperatureMin;
    return this;
  }

  public DailyResponse addApparentTemperatureMinItem(Float apparentTemperatureMinItem) {
    if (this.apparentTemperatureMin == null) {
      this.apparentTemperatureMin = new ArrayList<Float>();
    }
    this.apparentTemperatureMin.add(apparentTemperatureMinItem);
    return this;
  }

   /**
   * Get apparentTemperatureMin
   * @return apparentTemperatureMin
  **/
  @Schema(description = "")
  public List<Float> getApparentTemperatureMin() {
    return apparentTemperatureMin;
  }

  public void setApparentTemperatureMin(List<Float> apparentTemperatureMin) {
    this.apparentTemperatureMin = apparentTemperatureMin;
  }

  public DailyResponse precipitationSum(List<Float> precipitationSum) {
    this.precipitationSum = precipitationSum;
    return this;
  }

  public DailyResponse addPrecipitationSumItem(Float precipitationSumItem) {
    if (this.precipitationSum == null) {
      this.precipitationSum = new ArrayList<Float>();
    }
    this.precipitationSum.add(precipitationSumItem);
    return this;
  }

   /**
   * Get precipitationSum
   * @return precipitationSum
  **/
  @Schema(description = "")
  public List<Float> getPrecipitationSum() {
    return precipitationSum;
  }

  public void setPrecipitationSum(List<Float> precipitationSum) {
    this.precipitationSum = precipitationSum;
  }

  public DailyResponse precipitationHours(List<Float> precipitationHours) {
    this.precipitationHours = precipitationHours;
    return this;
  }

  public DailyResponse addPrecipitationHoursItem(Float precipitationHoursItem) {
    if (this.precipitationHours == null) {
      this.precipitationHours = new ArrayList<Float>();
    }
    this.precipitationHours.add(precipitationHoursItem);
    return this;
  }

   /**
   * Get precipitationHours
   * @return precipitationHours
  **/
  @Schema(description = "")
  public List<Float> getPrecipitationHours() {
    return precipitationHours;
  }

  public void setPrecipitationHours(List<Float> precipitationHours) {
    this.precipitationHours = precipitationHours;
  }

  public DailyResponse weatherCode(List<Float> weatherCode) {
    this.weatherCode = weatherCode;
    return this;
  }

  public DailyResponse addWeatherCodeItem(Float weatherCodeItem) {
    if (this.weatherCode == null) {
      this.weatherCode = new ArrayList<Float>();
    }
    this.weatherCode.add(weatherCodeItem);
    return this;
  }

   /**
   * Get weatherCode
   * @return weatherCode
  **/
  @Schema(description = "")
  public List<Float> getWeatherCode() {
    return weatherCode;
  }

  public void setWeatherCode(List<Float> weatherCode) {
    this.weatherCode = weatherCode;
  }

  public DailyResponse sunrise(List<Float> sunrise) {
    this.sunrise = sunrise;
    return this;
  }

  public DailyResponse addSunriseItem(Float sunriseItem) {
    if (this.sunrise == null) {
      this.sunrise = new ArrayList<Float>();
    }
    this.sunrise.add(sunriseItem);
    return this;
  }

   /**
   * Get sunrise
   * @return sunrise
  **/
  @Schema(description = "")
  public List<Float> getSunrise() {
    return sunrise;
  }

  public void setSunrise(List<Float> sunrise) {
    this.sunrise = sunrise;
  }

  public DailyResponse sunset(List<Float> sunset) {
    this.sunset = sunset;
    return this;
  }

  public DailyResponse addSunsetItem(Float sunsetItem) {
    if (this.sunset == null) {
      this.sunset = new ArrayList<Float>();
    }
    this.sunset.add(sunsetItem);
    return this;
  }

   /**
   * Get sunset
   * @return sunset
  **/
  @Schema(description = "")
  public List<Float> getSunset() {
    return sunset;
  }

  public void setSunset(List<Float> sunset) {
    this.sunset = sunset;
  }

  public DailyResponse windSpeed10mMax(List<Float> windSpeed10mMax) {
    this.windSpeed10mMax = windSpeed10mMax;
    return this;
  }

  public DailyResponse addWindSpeed10mMaxItem(Float windSpeed10mMaxItem) {
    if (this.windSpeed10mMax == null) {
      this.windSpeed10mMax = new ArrayList<Float>();
    }
    this.windSpeed10mMax.add(windSpeed10mMaxItem);
    return this;
  }

   /**
   * Get windSpeed10mMax
   * @return windSpeed10mMax
  **/
  @Schema(description = "")
  public List<Float> getWindSpeed10mMax() {
    return windSpeed10mMax;
  }

  public void setWindSpeed10mMax(List<Float> windSpeed10mMax) {
    this.windSpeed10mMax = windSpeed10mMax;
  }

  public DailyResponse windGusts10mMax(List<Float> windGusts10mMax) {
    this.windGusts10mMax = windGusts10mMax;
    return this;
  }

  public DailyResponse addWindGusts10mMaxItem(Float windGusts10mMaxItem) {
    if (this.windGusts10mMax == null) {
      this.windGusts10mMax = new ArrayList<Float>();
    }
    this.windGusts10mMax.add(windGusts10mMaxItem);
    return this;
  }

   /**
   * Get windGusts10mMax
   * @return windGusts10mMax
  **/
  @Schema(description = "")
  public List<Float> getWindGusts10mMax() {
    return windGusts10mMax;
  }

  public void setWindGusts10mMax(List<Float> windGusts10mMax) {
    this.windGusts10mMax = windGusts10mMax;
  }

  public DailyResponse windDirection10mDominant(List<Float> windDirection10mDominant) {
    this.windDirection10mDominant = windDirection10mDominant;
    return this;
  }

  public DailyResponse addWindDirection10mDominantItem(Float windDirection10mDominantItem) {
    if (this.windDirection10mDominant == null) {
      this.windDirection10mDominant = new ArrayList<Float>();
    }
    this.windDirection10mDominant.add(windDirection10mDominantItem);
    return this;
  }

   /**
   * Get windDirection10mDominant
   * @return windDirection10mDominant
  **/
  @Schema(description = "")
  public List<Float> getWindDirection10mDominant() {
    return windDirection10mDominant;
  }

  public void setWindDirection10mDominant(List<Float> windDirection10mDominant) {
    this.windDirection10mDominant = windDirection10mDominant;
  }

  public DailyResponse shortwaveRadiationSum(List<Float> shortwaveRadiationSum) {
    this.shortwaveRadiationSum = shortwaveRadiationSum;
    return this;
  }

  public DailyResponse addShortwaveRadiationSumItem(Float shortwaveRadiationSumItem) {
    if (this.shortwaveRadiationSum == null) {
      this.shortwaveRadiationSum = new ArrayList<Float>();
    }
    this.shortwaveRadiationSum.add(shortwaveRadiationSumItem);
    return this;
  }

   /**
   * Get shortwaveRadiationSum
   * @return shortwaveRadiationSum
  **/
  @Schema(description = "")
  public List<Float> getShortwaveRadiationSum() {
    return shortwaveRadiationSum;
  }

  public void setShortwaveRadiationSum(List<Float> shortwaveRadiationSum) {
    this.shortwaveRadiationSum = shortwaveRadiationSum;
  }

  public DailyResponse uvIndexMax(List<Float> uvIndexMax) {
    this.uvIndexMax = uvIndexMax;
    return this;
  }

  public DailyResponse addUvIndexMaxItem(Float uvIndexMaxItem) {
    if (this.uvIndexMax == null) {
      this.uvIndexMax = new ArrayList<Float>();
    }
    this.uvIndexMax.add(uvIndexMaxItem);
    return this;
  }

   /**
   * Get uvIndexMax
   * @return uvIndexMax
  **/
  @Schema(description = "")
  public List<Float> getUvIndexMax() {
    return uvIndexMax;
  }

  public void setUvIndexMax(List<Float> uvIndexMax) {
    this.uvIndexMax = uvIndexMax;
  }

  public DailyResponse uvIndexClearSkyMax(List<Float> uvIndexClearSkyMax) {
    this.uvIndexClearSkyMax = uvIndexClearSkyMax;
    return this;
  }

  public DailyResponse addUvIndexClearSkyMaxItem(Float uvIndexClearSkyMaxItem) {
    if (this.uvIndexClearSkyMax == null) {
      this.uvIndexClearSkyMax = new ArrayList<Float>();
    }
    this.uvIndexClearSkyMax.add(uvIndexClearSkyMaxItem);
    return this;
  }

   /**
   * Get uvIndexClearSkyMax
   * @return uvIndexClearSkyMax
  **/
  @Schema(description = "")
  public List<Float> getUvIndexClearSkyMax() {
    return uvIndexClearSkyMax;
  }

  public void setUvIndexClearSkyMax(List<Float> uvIndexClearSkyMax) {
    this.uvIndexClearSkyMax = uvIndexClearSkyMax;
  }

  public DailyResponse et0FaoEvapotranspiration(List<Float> et0FaoEvapotranspiration) {
    this.et0FaoEvapotranspiration = et0FaoEvapotranspiration;
    return this;
  }

  public DailyResponse addEt0FaoEvapotranspirationItem(Float et0FaoEvapotranspirationItem) {
    if (this.et0FaoEvapotranspiration == null) {
      this.et0FaoEvapotranspiration = new ArrayList<Float>();
    }
    this.et0FaoEvapotranspiration.add(et0FaoEvapotranspirationItem);
    return this;
  }

   /**
   * Get et0FaoEvapotranspiration
   * @return et0FaoEvapotranspiration
  **/
  @Schema(description = "")
  public List<Float> getEt0FaoEvapotranspiration() {
    return et0FaoEvapotranspiration;
  }

  public void setEt0FaoEvapotranspiration(List<Float> et0FaoEvapotranspiration) {
    this.et0FaoEvapotranspiration = et0FaoEvapotranspiration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyResponse dailyResponse = (DailyResponse) o;
    return Objects.equals(this.time, dailyResponse.time) &&
        Objects.equals(this.temperature2mMax, dailyResponse.temperature2mMax) &&
        Objects.equals(this.temperature2mMin, dailyResponse.temperature2mMin) &&
        Objects.equals(this.apparentTemperatureMax, dailyResponse.apparentTemperatureMax) &&
        Objects.equals(this.apparentTemperatureMin, dailyResponse.apparentTemperatureMin) &&
        Objects.equals(this.precipitationSum, dailyResponse.precipitationSum) &&
        Objects.equals(this.precipitationHours, dailyResponse.precipitationHours) &&
        Objects.equals(this.weatherCode, dailyResponse.weatherCode) &&
        Objects.equals(this.sunrise, dailyResponse.sunrise) &&
        Objects.equals(this.sunset, dailyResponse.sunset) &&
        Objects.equals(this.windSpeed10mMax, dailyResponse.windSpeed10mMax) &&
        Objects.equals(this.windGusts10mMax, dailyResponse.windGusts10mMax) &&
        Objects.equals(this.windDirection10mDominant, dailyResponse.windDirection10mDominant) &&
        Objects.equals(this.shortwaveRadiationSum, dailyResponse.shortwaveRadiationSum) &&
        Objects.equals(this.uvIndexMax, dailyResponse.uvIndexMax) &&
        Objects.equals(this.uvIndexClearSkyMax, dailyResponse.uvIndexClearSkyMax) &&
        Objects.equals(this.et0FaoEvapotranspiration, dailyResponse.et0FaoEvapotranspiration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, temperature2mMax, temperature2mMin, apparentTemperatureMax, apparentTemperatureMin, precipitationSum, precipitationHours, weatherCode, sunrise, sunset, windSpeed10mMax, windGusts10mMax, windDirection10mDominant, shortwaveRadiationSum, uvIndexMax, uvIndexClearSkyMax, et0FaoEvapotranspiration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyResponse {\n");
    
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    temperature2mMax: ").append(toIndentedString(temperature2mMax)).append("\n");
    sb.append("    temperature2mMin: ").append(toIndentedString(temperature2mMin)).append("\n");
    sb.append("    apparentTemperatureMax: ").append(toIndentedString(apparentTemperatureMax)).append("\n");
    sb.append("    apparentTemperatureMin: ").append(toIndentedString(apparentTemperatureMin)).append("\n");
    sb.append("    precipitationSum: ").append(toIndentedString(precipitationSum)).append("\n");
    sb.append("    precipitationHours: ").append(toIndentedString(precipitationHours)).append("\n");
    sb.append("    weatherCode: ").append(toIndentedString(weatherCode)).append("\n");
    sb.append("    sunrise: ").append(toIndentedString(sunrise)).append("\n");
    sb.append("    sunset: ").append(toIndentedString(sunset)).append("\n");
    sb.append("    windSpeed10mMax: ").append(toIndentedString(windSpeed10mMax)).append("\n");
    sb.append("    windGusts10mMax: ").append(toIndentedString(windGusts10mMax)).append("\n");
    sb.append("    windDirection10mDominant: ").append(toIndentedString(windDirection10mDominant)).append("\n");
    sb.append("    shortwaveRadiationSum: ").append(toIndentedString(shortwaveRadiationSum)).append("\n");
    sb.append("    uvIndexMax: ").append(toIndentedString(uvIndexMax)).append("\n");
    sb.append("    uvIndexClearSkyMax: ").append(toIndentedString(uvIndexClearSkyMax)).append("\n");
    sb.append("    et0FaoEvapotranspiration: ").append(toIndentedString(et0FaoEvapotranspiration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
